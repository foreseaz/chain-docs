(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{238:function(t,e,a){"use strict";a.r(e);var s=a(28),n=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"transaction"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#transaction"}},[t._v("#")]),t._v(" Transaction")]),t._v(" "),a("h2",{attrs:{id:"transaction-identifier"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#transaction-identifier"}},[t._v("#")]),t._v(" Transaction Identifier")]),t._v(" "),a("p",[t._v("Each transaction has an identifier (typically shortened as TX ID). It is currently defined as")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("blake2s_hash(SCALE-encoded transaction binary data)")])])]),t._v(" "),a("tbody")]),t._v(" "),a("p",[t._v("See "),a("a",{attrs:{href:"./serialization"}},[t._v("serialization")]),t._v(" for more details about the transaction binary format.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("NOTE")]),t._v(" "),a("p",[t._v("the initial prototype uses blake2s, but it may be later changed to blake2b or something more complex: e.g. transaction identifier is a root of a Merkle tree formed from different transaction components as leaves")])]),t._v(" "),a("h2",{attrs:{id:"witness"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#witness"}},[t._v("#")]),t._v(" Witness")]),t._v(" "),a("p",[t._v("See "),a("a",{attrs:{href:"./signature-schemes"}},[t._v("signature-schemes")]),t._v(" for more details")]),t._v(" "),a("h2",{attrs:{id:"textual-address-representation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#textual-address-representation"}},[t._v("#")]),t._v(" Textual Address Representation")]),t._v(" "),a("p",[t._v("Crypto.com Chain supports threshold / multi-signature addresses that are represented as a single hash (see "),a("a",{attrs:{href:"./signature-schemes"}},[t._v("signature-schemes")]),t._v(") which is different from Ethereum.")]),t._v(" "),a("p",[t._v("To represent the underlying byte array in a textual form, "),a("a",{attrs:{href:"https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki",target:"_blank",rel:"noopener noreferrer"}},[t._v("Bech32"),a("OutboundLink")],1),t._v(" is used. The convention for the human-readable part is the following:")]),t._v(" "),a("ul",[a("li",[t._v("cro: mainnet payment")]),t._v(" "),a("li",[t._v("tcro: testnet payment")]),t._v(" "),a("li",[t._v("dcro: local devnet/regtest payment")]),t._v(" "),a("li",[t._v("staking addresses (see "),a("a",{attrs:{href:"./transaction-accounting-model"}},[t._v("accounting")]),t._v(") are textually represented in hexadecimal encoding to match the initial Ethereum ones")])]),t._v(" "),a("h2",{attrs:{id:"transaction-fees"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#transaction-fees"}},[t._v("#")]),t._v(" Transaction Fees")]),t._v(" "),a("p",[t._v("The initial prototype uses a linear fee system. The minimal transaction fee is defined according to the formula:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("<BASE_AMOUNT> + <PER_BYTE> * size\n")])])]),a("p",[a("code",[t._v("BASE_AMOUNT")]),t._v(" and "),a("code",[t._v("PER_BYTE")]),t._v(" are special "),a("RouterLink",{attrs:{to:"/getting-started/network-parameters.html"}},[t._v("network parameters")]),t._v(" in a fraction of CRO. "),a("code",[t._v("size")]),t._v(" is the serialized transaction data’s size in bytes.")],1),t._v(" "),a("p",[t._v("To verify a "),a("a",{attrs:{href:"#transaction-types"}},[t._v("basic transaction")]),t._v(" one would need to check:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("sum(inputs amounts) or account.unbonded/bonded == sum(outputs amounts) + fee\n")])])]),a("p",[t._v("The transaction fee goes to the "),a("a",{attrs:{href:"#rewards"}},[t._v("rewards pool")]),t._v(" to reward the validations.")]),t._v(" "),a("h2",{attrs:{id:"transaction-types"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#transaction-types"}},[t._v("#")]),t._v(" Transaction Types")]),t._v(" "),a("h3",{attrs:{id:"basic-types-plain-version"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#basic-types-plain-version"}},[t._v("#")]),t._v(" Basic Types (plain version):")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("NOTE")]),t._v(" "),a("p",[t._v("All these types should also contain metadata, such as "),a("RouterLink",{attrs:{to:"/getting-started/chain-id-and-network-id.html#network-id"}},[t._v("network ID")]),t._v(". Furthermore, some of these transactions will be obfuscated to provide "),a("RouterLink",{attrs:{to:"/getting-started/transaction-privacy.html"}},[t._v("privacy protections")]),t._v(" to the users.")],1)]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Tx type")]),t._v(" "),a("th",[t._v("Inputs")]),t._v(" "),a("th",[t._v("Outputs")]),t._v(" "),a("th",[t._v("Fees involved?")]),t._v(" "),a("th",[t._v("Obfuscated?")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("code",[t._v("TransferTx")])]),t._v(" "),a("td",[t._v("UTXOs")]),t._v(" "),a("td",[t._v("UTXOs")]),t._v(" "),a("td",[t._v("Yes")]),t._v(" "),a("td",[t._v("Yes")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("DepositStakeTx")])]),t._v(" "),a("td",[t._v("UTXOs")]),t._v(" "),a("td",[t._v("Depostit to specified account’s "),a("code",[t._v("bonded")]),t._v(" amount")]),t._v(" "),a("td",[t._v("Yes")]),t._v(" "),a("td",[t._v("Yes")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("WithdrawUnbondedTx")])]),t._v(" "),a("td",[t._v("Nonce, account")]),t._v(" "),a("td",[t._v("UTXOs")]),t._v(" "),a("td",[t._v("Yes")]),t._v(" "),a("td",[t._v("Yes")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("UnbondStakeTx")])]),t._v(" "),a("td",[t._v("Nonce, amount, account")]),t._v(" "),a("td",[t._v("Moves funds from "),a("code",[t._v("bonded")]),t._v(" to "),a("code",[t._v("unbonded")]),t._v(" under the same account with timelock")]),t._v(" "),a("td",[t._v("Yes")]),t._v(" "),a("td",[t._v("No")])])])]),t._v(" "),a("p",[t._v("Please also refer to this "),a("RouterLink",{attrs:{to:"/getting-started/send_your_first_transaction.html#types-of-transaction-and-address"}},[t._v("flowchart")]),t._v(" that shows different types of transaction and how they interact with each other.")],1),t._v(" "),a("h3",{attrs:{id:"advanced-types"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#advanced-types"}},[t._v("#")]),t._v(" Advanced Types:")]),t._v(" "),a("p",[t._v("Besides the above-mentioned basic transactions, there are some advanced types of transactions related to the council node and service node state metadata management, for example:")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("UnjailTx")]),t._v(": This transaction can be broadcasted to "),a("RouterLink",{attrs:{to:"/getting-started/staking.html#un-jailing"}},[t._v("un-jail")]),t._v(" a node. It takes "),a("em",[t._v("nonce")]),t._v(", "),a("em",[t._v("account")]),t._v(" and has to be signed by the account’s corresponding key.")],1),t._v(" "),a("li",[a("code",[t._v("NodeJoinTx")]),t._v(": Anyone who wishes to become a council node can broadcast this transaction. It takes "),a("em",[t._v("council node data")]),t._v(", "),a("em",[t._v("staking address")]),t._v(" and has to be signed by the node's staking key. For further details on the process of joining the Crypto.com chain as a validator, please refer to this "),a("RouterLink",{attrs:{to:"/getting-started/node-joining.html"}},[t._v("documentation")]),t._v(".")],1)]),t._v(" "),a("p",[t._v("Remarks: There will be no transaction fee for advanced types Tx in the initial prototype.")]),t._v(" "),a("h2",{attrs:{id:"cross-currency-transactions-and-settlements"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cross-currency-transactions-and-settlements"}},[t._v("#")]),t._v(" Cross-currency transactions and settlements")]),t._v(" "),a("p",[t._v("A proof of concept on the cross-currency transfers and settlement on CRO can be found in this "),a("a",{attrs:{href:"https://github.com/crypto-com/settlement-cro",target:"_blank",rel:"noopener noreferrer"}},[t._v("repository"),a("OutboundLink")],1),t._v(". It demonstrates how to configure "),a("a",{attrs:{href:"https://github.com/interledger",target:"_blank",rel:"noopener noreferrer"}},[t._v("Interledger"),a("OutboundLink")],1),t._v(" nodes for performing CRO-ETH cross-currency transactions between the Ethereum network (testnet or mainnet) and the CRO devnet.")]),t._v(" "),a("h4",{attrs:{id:"todo"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#todo"}},[t._v("#")]),t._v(" TODO")]),t._v(" "),a("p",[t._v("These transaction types are not yet specified:")]),t._v(" "),a("ul",[a("li",[t._v("ChangeNetworkParamTX?")]),t._v(" "),a("li",[t._v("AddWhitelistServiceNodeTx: takes node data, whitelist type (customer acquirer, merchant acquirer, settlement agent), staking address; co-signed by 2/3 current nodes?")]),t._v(" "),a("li",[t._v("EditWhitelistServiceNodeTx: takes node data, signed by that node?")]),t._v(" "),a("li",[t._v("RemoveWhitelistServiceNodeTx: takes whitelisted node id; co-signed by 2/3 current nodes>")]),t._v(" "),a("li",[t._v("AddMerchantIdTx: takes merchant data (certificate + cert-signed pk or some payment gateway point?), signed by merchant acquirer?")]),t._v(" "),a("li",[t._v("RemoveMerchantIdTx: takes merchant id, signed by merchant acquirer?")])])])}),[],!1,null,null,null);e.default=n.exports}}]);